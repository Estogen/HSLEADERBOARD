from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import logging

from search import search_top20, search_nickname
from tgbot.keyboards import inline
from tgbot.keyboards.inline import RegionCallback
from tgbot.misc.states import Gen
from tgbot.db_api.sqlite import Database

user_router = Router()
db = Database(path_to_db="tgbot/db_api/main.db")

def setup_logging():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

async def get_region(state: FSMContext):
    state_name = await state.get_state()
    return state_name.split(':')[1] if state_name else 'EU'

@user_router.message(CommandStart())
async def user_start(message: Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    db.add_user(id=user_id, username=username, name=full_name)

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {full_name}! üòä\n\n"
                         "–ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:",
                         reply_markup=inline.menu)

@user_router.callback_query(RegionCallback.filter())
async def select_us(clbck: CallbackQuery, state: FSMContext, callback_data: RegionCallback):
    await clbck.answer()
    if callback_data.entitys == 'üóΩ –ê–º–µ—Ä–∏–∫–∞':
        await state.set_state(Gen.US)
    elif callback_data.entitys == 'üá™üá∫ –ï–≤—Ä–æ–ø–∞':
        await state.set_state(Gen.EU)
    else:
        await state.set_state(Gen.AP)
    await clbck.message.edit_text(f'<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞</b> - {callback_data.entitys}\n\n'
                                  '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å üë®‚Äçüíª\n\n'
                                  '–ù–∞–ø—Ä–∏–º–µ—Ä:\n'
                                  'nusm ---> ≈†nusm√ºmriken\n'
                                  'gudd ---> guDDummit\n\n'
                                  '<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i> ‚§µÔ∏è',
                                  reply_markup=inline.menu2)

@user_router.callback_query(F.data == "top20")
async def show_top20(clbck: CallbackQuery, state: FSMContext):
    region = await get_region(state)
    if not region:
        logging.warning("Region is not set in the state")
        await clbck.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    text = search_top20(region)
    await clbck.message.edit_text(f'–¢–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –≤ {region}\n\n{text}\n\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:</i>',
                                  reply_markup=inline.back)


@user_router.callback_query(F.data == "refresh")
async def show_top20(clbck: CallbackQuery, state: FSMContext):
    region = await get_region(state)
    if not region:
        logging.warning("Region is not set in the state")
        await clbck.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    text = search_top20(region)
    await clbck.message.answer(f'–¢–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –≤ {region}\n\n{text}\n\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:</i>',
                                  reply_markup=inline.back)
@user_router.callback_query(F.data == "back_to_menu")
async def go_to_menu(clbck: CallbackQuery, state: FSMContext):
    await state.clear()
    await clbck.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:',
                                  reply_markup=inline.menu)

@user_router.message(F.text, StateFilter(None))
async def nogen(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:",
                         reply_markup=inline.menu)

@user_router.message(F.text)
async def show_score(message: Message, state: FSMContext):
    region = await get_region(state)
    if not region:
        logging.warning("Region is not set in the state")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    text = search_nickname(region, message.text)
    await message.answer(f'{text}\n\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:</i>',
                         reply_markup=inline.menu2)
